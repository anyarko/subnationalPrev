// Generated by rstantools.  Do not edit by hand.

/*
    subnationalPrev is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    subnationalPrev is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with subnationalPrev.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_corr_neg_binomial_partial_pooling_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 66> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 10, column 2 to column 31)",
  " (in 'string', line 11, column 2 to column 19)",
  " (in 'string', line 12, column 2 to column 37)",
  " (in 'string', line 13, column 2 to column 18)",
  " (in 'string', line 14, column 2 to column 33)",
  " (in 'string', line 15, column 2 to column 28)",
  " (in 'string', line 16, column 2 to column 18)",
  " (in 'string', line 17, column 2 to column 22)",
  " (in 'string', line 18, column 2 to column 25)",
  " (in 'string', line 21, column 2 to column 21)",
  " (in 'string', line 22, column 2 to column 29)",
  " (in 'string', line 25, column 6 to column 46)",
  " (in 'string', line 24, column 17 to line 26, column 5)",
  " (in 'string', line 24, column 4 to line 26, column 5)",
  " (in 'string', line 27, column 11 to column 12)",
  " (in 'string', line 27, column 4 to column 17)",
  " (in 'string', line 28, column 11 to column 12)",
  " (in 'string', line 28, column 4 to column 18)",
  " (in 'string', line 30, column 4 to column 47)",
  " (in 'string', line 31, column 4 to column 41)",
  " (in 'string', line 32, column 11 to column 12)",
  " (in 'string', line 32, column 13 to column 14)",
  " (in 'string', line 32, column 4 to column 20)",
  " (in 'string', line 34, column 6 to column 28)",
  " (in 'string', line 33, column 17 to line 35, column 5)",
  " (in 'string', line 33, column 4 to line 35, column 5)",
  " (in 'string', line 37, column 4 to line 38, column 105)",
  " (in 'string', line 23, column 2 to line 39, column 3)",
  " (in 'string', line 42, column 2 to column 25)",
  " (in 'string', line 43, column 2 to column 29)",
  " (in 'string', line 45, column 4 to column 41)",
  " (in 'string', line 44, column 15 to line 46, column 3)",
  " (in 'string', line 44, column 2 to line 46, column 3)",
  " (in 'string', line 47, column 2 to column 31)",
  " (in 'string', line 48, column 2 to column 23)",
  " (in 'string', line 50, column 2 to column 25)",
  " (in 'string', line 51, column 2 to column 36)",
  " (in 'string', line 52, column 2 to column 30)",
  " (in 'string', line 53, column 2 to column 27)",
  " (in 'string', line 56, column 4 to column 45)",
  " (in 'string', line 55, column 15 to line 57, column 3)",
  " (in 'string', line 55, column 2 to line 57, column 3)",
  " (in 'string', line 2, column 2 to column 22)",
  " (in 'string', line 3, column 2 to column 22)",
  " (in 'string', line 4, column 8 to column 9)",
  " (in 'string', line 4, column 10 to column 11)",
  " (in 'string', line 4, column 2 to column 13)",
  " (in 'string', line 5, column 9 to column 10)",
  " (in 'string', line 5, column 2 to column 19)",
  " (in 'string', line 6, column 2 to column 22)",
  " (in 'string', line 7, column 8 to column 9)",
  " (in 'string', line 7, column 2 to column 43)",
  " (in 'string', line 10, column 8 to column 9)",
  " (in 'string', line 10, column 22 to column 23)",
  " (in 'string', line 11, column 9 to column 10)",
  " (in 'string', line 12, column 24 to column 25)",
  " (in 'string', line 13, column 9 to column 10)",
  " (in 'string', line 15, column 23 to column 24)",
  " (in 'string', line 16, column 9 to column 10)",
  " (in 'string', line 17, column 9 to column 10)",
  " (in 'string', line 17, column 11 to column 12)",
  " (in 'string', line 18, column 9 to column 10)",
  " (in 'string', line 21, column 9 to column 10)",
  " (in 'string', line 21, column 11 to column 12)",
  " (in 'string', line 22, column 24 to column 25)"};
#include <stan_meta_header.hpp>
class model_corr_neg_binomial_partial_pooling final : public model_base_crtp<model_corr_neg_binomial_partial_pooling> {
private:
  int N;
  int K;
  std::vector<std::vector<int>> y;
  Eigen::Matrix<double,-1,1> offset_data__;
  int J;
  std::vector<int> jj;
  Eigen::Map<Eigen::Matrix<double,-1,1>> offset{nullptr, 0};
public:
  ~model_corr_neg_binomial_partial_pooling() {}
  model_corr_neg_binomial_partial_pooling(stan::io::var_context& context__,
                                          unsigned int random_seed__ = 0,
                                          std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_corr_neg_binomial_partial_pooling_namespace::model_corr_neg_binomial_partial_pooling";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 43;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 43;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 44;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("y", "K", K);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K)});
      y = std::vector<std::vector<int>>(N,
            std::vector<int>(K, std::numeric_limits<int>::min()));
      {
        std::vector<int> y_flat__;
        current_statement__ = 47;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 47;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 47;
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 47;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 48;
      stan::math::validate_non_negative_index("offset", "N", N);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "offset", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      offset_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                        std::numeric_limits<double>::quiet_NaN());
      new (&offset)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(offset_data__.data(), N);
      {
        std::vector<local_scalar_t__> offset_flat__;
        current_statement__ = 49;
        offset_flat__ = context__.vals_r("offset");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 49;
          stan::model::assign(offset, offset_flat__[(pos__ - 1)],
            "assigning variable offset", stan::model::index_uni(sym1__));
          current_statement__ = 49;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 50;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 50;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("jj", "N", N);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "jj", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      jj = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 52;
      jj = context__.vals_i("jj");
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "jj", jj, 1);
      current_statement__ = 52;
      stan::math::check_less_or_equal(function__, "jj", jj, J);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("rho_j", "J", J);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("rho_j", "K", K);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("mu_rho", "K", K);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("sigma_rho", "K", K);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("delta", "N", N);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("L", "K", K);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("L", "K", K);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("tau_n", "K", K);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("epsilon", "N", N);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("epsilon", "K", K);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("reciprocal_w", "K", K);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("lambda", "N", N);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("lambda", "K", K);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("w", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (J * K) + K + K + N + 1 + ((K * (K - 1)) / 2) + K + (N *
      K) + K;
  }
  inline std::string model_name() const final {
    return "model_corr_neg_binomial_partial_pooling";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_corr_neg_binomial_partial_pooling_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> rho_j =
        std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(J,
          Eigen::Matrix<local_scalar_t__,1,-1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 1;
      rho_j = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>>(J, K);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_rho =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      mu_rho = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_rho =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      sigma_rho = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, K);
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 4;
      delta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      local_scalar_t__ sigma_delta = DUMMY_VAR__;
      current_statement__ = 5;
      sigma_delta = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K, DUMMY_VAR__);
      current_statement__ = 6;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, K);
      Eigen::Matrix<local_scalar_t__,-1,1> tau_n =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 7;
      tau_n = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,-1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, K, DUMMY_VAR__);
      current_statement__ = 8;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N,
                  K);
      Eigen::Matrix<local_scalar_t__,-1,1> reciprocal_w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 9;
      reciprocal_w = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,-1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        current_statement__ = 14;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 12;
          stan::model::assign(w, (1.0 /
            stan::math::sqrt(
              stan::math::abs(
                stan::model::rvalue(reciprocal_w, "reciprocal_w",
                  stan::model::index_uni(k))))), "assigning variable w",
            stan::model::index_uni(k));
        }
        current_statement__ = 15;
        stan::math::validate_non_negative_index("mu", "K", K);
        Eigen::Matrix<local_scalar_t__,-1,1> mu =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
        current_statement__ = 17;
        stan::math::validate_non_negative_index("tau", "K", K);
        Eigen::Matrix<local_scalar_t__,-1,1> tau =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
        current_statement__ = 19;
        stan::model::assign(mu,
          stan::math::log(
            stan::math::elt_divide(1.0,
              stan::math::sqrt(
                stan::math::add(1.0, stan::math::square(tau_n))))),
          "assigning variable mu");
        current_statement__ = 20;
        stan::model::assign(tau,
          stan::math::sqrt(
            stan::math::log(stan::math::add(1.0, stan::math::square(tau_n)))),
          "assigning variable tau");
        current_statement__ = 21;
        stan::math::validate_non_negative_index("rho", "N", N);
        current_statement__ = 22;
        stan::math::validate_non_negative_index("rho", "K", K);
        Eigen::Matrix<local_scalar_t__,-1,-1> rho =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, K, DUMMY_VAR__);
        current_statement__ = 26;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 24;
          stan::model::assign(rho,
            stan::model::rvalue(rho_j, "rho_j",
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(n)))),
            "assigning variable rho", stan::model::index_uni(n));
        }
        current_statement__ = 27;
        stan::model::assign(lambda,
          stan::math::elt_multiply(
            stan::math::exp(
              stan::math::add(
                stan::math::add(
                  stan::math::add(rho,
                    stan::math::rep_matrix(
                      stan::math::multiply(sigma_delta, delta), K)),
                  stan::math::transpose(stan::math::rep_matrix(mu, N))),
                stan::math::transpose(
                  stan::math::multiply(stan::math::diag_pre_multiply(tau, L),
                    stan::math::transpose(epsilon))))),
            stan::math::rep_matrix(offset, K)), "assigning variable lambda");
      }
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "w", w, 0);
      {
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_rho, 0, 10));
        current_statement__ = 30;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma_rho, 0, 2.5));
        current_statement__ = 33;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 31;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(rho_j, "rho_j",
                             stan::model::index_uni(j)), mu_rho, sigma_rho));
        }
        current_statement__ = 34;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma_delta, 0, 2.5));
        current_statement__ = 35;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(delta));
        current_statement__ = 36;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(tau_n, 0, 2.5));
        current_statement__ = 37;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                         stan::math::to_vector(epsilon)));
        current_statement__ = 38;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(reciprocal_w));
        current_statement__ = 39;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(L, 2));
        current_statement__ = 42;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 40;
          lp_accum__.add(stan::math::neg_binomial_2_lpmf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_omni(),
                             stan::model::index_uni(k)),
                           stan::model::rvalue(lambda, "lambda",
                             stan::model::index_omni(),
                             stan::model::index_uni(k)),
                           stan::model::rvalue(w, "w",
                             stan::model::index_uni(k))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_corr_neg_binomial_partial_pooling_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<double,1,-1>> rho_j =
        std::vector<Eigen::Matrix<double,1,-1>>(J,
          Eigen::Matrix<double,1,-1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      rho_j = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>>(J, K);
      Eigen::Matrix<double,-1,1> mu_rho =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      mu_rho = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,1> sigma_rho =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      sigma_rho = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, K);
      Eigen::Matrix<double,-1,1> delta =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      delta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N);
      double sigma_delta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      sigma_delta = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,-1> L =
        Eigen::Matrix<double,-1,-1>::Constant(K, K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__, K);
      Eigen::Matrix<double,-1,1> tau_n =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      tau_n = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,-1> epsilon =
        Eigen::Matrix<double,-1,-1>::Constant(N, K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N,
                  K);
      Eigen::Matrix<double,-1,1> reciprocal_w =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      reciprocal_w = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,-1> lambda =
        Eigen::Matrix<double,-1,-1>::Constant(N, K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> w =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          out__.write(rho_j[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(mu_rho);
      out__.write(sigma_rho);
      out__.write(delta);
      out__.write(sigma_delta);
      out__.write(L);
      out__.write(tau_n);
      out__.write(epsilon);
      out__.write(reciprocal_w);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      {
        current_statement__ = 14;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 12;
          stan::model::assign(w, (1.0 /
            stan::math::sqrt(
              stan::math::abs(
                stan::model::rvalue(reciprocal_w, "reciprocal_w",
                  stan::model::index_uni(k))))), "assigning variable w",
            stan::model::index_uni(k));
        }
        current_statement__ = 15;
        stan::math::validate_non_negative_index("mu", "K", K);
        Eigen::Matrix<double,-1,1> mu =
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 17;
        stan::math::validate_non_negative_index("tau", "K", K);
        Eigen::Matrix<double,-1,1> tau =
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 19;
        stan::model::assign(mu,
          stan::math::log(
            stan::math::elt_divide(1.0,
              stan::math::sqrt(
                stan::math::add(1.0, stan::math::square(tau_n))))),
          "assigning variable mu");
        current_statement__ = 20;
        stan::model::assign(tau,
          stan::math::sqrt(
            stan::math::log(stan::math::add(1.0, stan::math::square(tau_n)))),
          "assigning variable tau");
        current_statement__ = 21;
        stan::math::validate_non_negative_index("rho", "N", N);
        current_statement__ = 22;
        stan::math::validate_non_negative_index("rho", "K", K);
        Eigen::Matrix<double,-1,-1> rho =
          Eigen::Matrix<double,-1,-1>::Constant(N, K,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 26;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 24;
          stan::model::assign(rho,
            stan::model::rvalue(rho_j, "rho_j",
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(n)))),
            "assigning variable rho", stan::model::index_uni(n));
        }
        current_statement__ = 27;
        stan::model::assign(lambda,
          stan::math::elt_multiply(
            stan::math::exp(
              stan::math::add(
                stan::math::add(
                  stan::math::add(rho,
                    stan::math::rep_matrix(
                      stan::math::multiply(sigma_delta, delta), K)),
                  stan::math::transpose(stan::math::rep_matrix(mu, N))),
                stan::math::transpose(
                  stan::math::multiply(stan::math::diag_pre_multiply(tau, L),
                    stan::math::transpose(epsilon))))),
            stan::math::rep_matrix(offset, K)), "assigning variable lambda");
      }
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "w", w, 0);
      if (emit_transformed_parameters__) {
        out__.write(lambda);
        out__.write(w);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> rho_j =
        std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(J,
          Eigen::Matrix<local_scalar_t__,1,-1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          current_statement__ = 1;
          stan::model::assign(rho_j, in__.read<local_scalar_t__>(),
            "assigning variable rho_j", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(rho_j);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_rho =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(mu_rho,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable mu_rho");
      out__.write(mu_rho);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_rho =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(sigma_rho,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable sigma_rho");
      out__.write_free_lb(0, sigma_rho);
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(delta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N),
        "assigning variable delta");
      out__.write(delta);
      local_scalar_t__ sigma_delta = DUMMY_VAR__;
      current_statement__ = 5;
      sigma_delta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_delta);
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(L,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(K, K),
        "assigning variable L");
      out__.write_free_cholesky_factor_corr(L);
      Eigen::Matrix<local_scalar_t__,-1,1> tau_n =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(tau_n,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable tau_n");
      out__.write(tau_n);
      Eigen::Matrix<local_scalar_t__,-1,-1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, K, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(epsilon,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(N, K),
        "assigning variable epsilon");
      out__.write(epsilon);
      Eigen::Matrix<local_scalar_t__,-1,1> reciprocal_w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(reciprocal_w,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable reciprocal_w");
      out__.write(reciprocal_w);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "rho_j", "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "mu_rho", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sigma_rho",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "delta", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "sigma_delta",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "L", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(K)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "tau_n", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "epsilon",
        "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "reciprocal_w",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> rho_j =
        std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(J,
          Eigen::Matrix<local_scalar_t__,1,-1>::Constant(K, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> rho_j_flat__;
        current_statement__ = 1;
        rho_j_flat__ = context__.vals_r("rho_j");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(rho_j, rho_j_flat__[(pos__ - 1)],
              "assigning variable rho_j", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(rho_j);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_rho =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_rho_flat__;
        current_statement__ = 2;
        mu_rho_flat__ = context__.vals_r("mu_rho");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(mu_rho, mu_rho_flat__[(pos__ - 1)],
            "assigning variable mu_rho", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu_rho);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_rho =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_rho_flat__;
        current_statement__ = 3;
        sigma_rho_flat__ = context__.vals_r("sigma_rho");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(sigma_rho, sigma_rho_flat__[(pos__ - 1)],
            "assigning variable sigma_rho", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_rho);
      Eigen::Matrix<local_scalar_t__,-1,1> delta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 4;
        delta_flat__ = context__.vals_r("delta");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(delta, delta_flat__[(pos__ - 1)],
            "assigning variable delta", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(delta);
      local_scalar_t__ sigma_delta = DUMMY_VAR__;
      current_statement__ = 5;
      sigma_delta = context__.vals_r("sigma_delta")[(1 - 1)];
      out__.write_free_lb(0, sigma_delta);
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> L_flat__;
        current_statement__ = 6;
        L_flat__ = context__.vals_r("L");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 6;
            stan::model::assign(L, L_flat__[(pos__ - 1)],
              "assigning variable L", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(L);
      Eigen::Matrix<local_scalar_t__,-1,1> tau_n =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> tau_n_flat__;
        current_statement__ = 7;
        tau_n_flat__ = context__.vals_r("tau_n");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(tau_n, tau_n_flat__[(pos__ - 1)],
            "assigning variable tau_n", stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(tau_n);
      Eigen::Matrix<local_scalar_t__,-1,-1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> epsilon_flat__;
        current_statement__ = 8;
        epsilon_flat__ = context__.vals_r("epsilon");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 8;
            stan::model::assign(epsilon, epsilon_flat__[(pos__ - 1)],
              "assigning variable epsilon", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 8;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(epsilon);
      Eigen::Matrix<local_scalar_t__,-1,1> reciprocal_w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> reciprocal_w_flat__;
        current_statement__ = 9;
        reciprocal_w_flat__ = context__.vals_r("reciprocal_w");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(reciprocal_w, reciprocal_w_flat__[(pos__ - 1)],
            "assigning variable reciprocal_w", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(reciprocal_w);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"rho_j", "mu_rho", "sigma_rho",
                "delta", "sigma_delta", "L", "tau_n", "epsilon",
                "reciprocal_w"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"lambda", "w"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(J),
                                                 static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(N)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(K),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(N),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(K)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "rho_j" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_rho" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_rho" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_delta");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
        param_names__.emplace_back(std::string() + "L" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau_n" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "epsilon" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "reciprocal_w" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "lambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "w" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
        param_names__.emplace_back(std::string() + "rho_j" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_rho" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_rho" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      param_names__.emplace_back(std::string() + "delta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_delta");
    for (int sym1__ = 1; sym1__ <= ((K * (K - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "L" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau_n" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "epsilon" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "reciprocal_w" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "lambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "w" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"rho_j\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"mu_rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sigma_delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"tau_n\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"reciprocal_w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"rho_j\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"mu_rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sigma_delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((K * (K - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"tau_n\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"reciprocal_w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((J * K) + K) + K) + N) + 1) + (K *
      K)) + K) + (N * K)) + K);
    const size_t num_transformed = emit_transformed_parameters * (((N * K) +
      K));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((J * K) + K) + K) + N) + 1) + (K *
      K)) + K) + (N * K)) + K);
    const size_t num_transformed = emit_transformed_parameters * (((N * K) +
      K));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_corr_neg_binomial_partial_pooling_namespace::model_corr_neg_binomial_partial_pooling;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_corr_neg_binomial_partial_pooling_namespace::profiles__;
}
#endif
#endif
